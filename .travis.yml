# NB: don't set `language: haskell` here

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
env:
  matrix:
    - CABALVER=1.22 GHCVER=7.8.4
    - CABALVER=1.22 GHCVER=7.10.2
  global:
    - secure: "kbkJf+ukAlZMIcbTD/jIGt6p51nkm2VERZ7jHKQ0betHPyQtBz7Ly43bge4oggRP6s9cDoobFSMendQHTuV5Kyv+BHnQTBpReryOzFMqP3Bm0ZGlZzbn+v2Z1HisDIHGK2kLk3iQyO4S8+Pc/yqbJYVf4iUxh+tUoB11/aCmE3k="
    - IPOPT_DEFAULT_LINEAR_SOLVER=ma57
    - LD_LIBRARY_PATH=/home/travis/build/libhsl

# Note: the distinction between `before_install` and `install` is not important.
before_install:
   # hsl linear solvers
 - pushd ../../ && git clone https://github.com/casadi/testbot.git
 - pushd testbot && recipes/setup.sh && popd
 - travis_retry testbot/recipes/fetch.sh libhsl.tar.gz && mkdir libhsl && tar -xvf libhsl.tar.gz -C libhsl
 - mkdir -p /home/travis/build/casadi/testbot
 - ls -al
 - popd

   # ghc/cabal
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER # see note about happy/alex
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

   # zeromq 4
 - travis_retry sudo add-apt-repository -y ppa:chris-lea/zeromq
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install libzmq3-dev=4.0.5-1chl1~precise1

   # alex/happy binaries
 - if [ $GHCVER = "head" ] || [ ${GHCVER%.*} = "7.8" ] || [ ${GHCVER%.*} = "7.10" ]; then
     travis_retry sudo apt-get install happy-1.19.4 alex-3.1.3;
     export PATH=/opt/alex/3.1.3/bin:/opt/happy/1.19.4/bin:$PATH;
   else
     travis_retry sudo apt-get install happy alex;
   fi

   # some dependencies
 - travis_retry sudo apt-get install -qq pkg-config libglpk-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libglib2.0-dev libcairo2-dev libpango1.0-dev libgtk2.0-dev libgsl0-dev liblapack-dev libblas-dev

   # casadi dependencies
 - travis_retry sudo apt-get install -qq coinor-libipopt-dev libmumps-dev libmumps-seq-dev

   # casadi from source:
 - travis_retry sudo apt-get install -qq gcc g++ gfortran git cmake
 - cd ..
 - git clone https://github.com/casadi/casadi.git
 - cd casadi
 - mkdir build
 - cd build
 - cmake -DCMAKE_INSTALL_PREFIX=~/casadi_install -DWITH_EXAMPLES=OFF ..
 - make -j2
 - make install
 - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:~/casadi_install/lib/pkgconfig
 - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/casadi_install/lib
 - cd ../../dynobud
#   # casadi from .deb
## - wget http://github.com/casadi/casadi/releases/download/2.2.0/libcasadi-shared-2.2.0-x86_64.deb
# - wget http://sourceforge.net/projects/casadi/files/CasADi/2.3.0/linux/libcasadi-v2.3.0.deb
# - sudo dpkg -i libcasadi-v2.3.0.deb
# - sudo apt-get install -f
# - rm libcasadi-v2.3.0.deb


install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
# - cabal install alex
# - cabal install happy
 - travis_retry cabal install gtk2hs-buildtools -j2
 - for pkg in $(ghc-pkg list --user); do ghc-pkg unregister --force ${pkg}; done
 - travis_retry cabal install --only-dependencies -fexamples --enable-tests --enable-benchmarks -j2

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure -fexamples --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build -j2  # this builds all libraries and executables (including tests/benchmarks)
 - cabal test --show-details=always
# - cabal check # complains about -O2
 - cabal sdist   # tests that a source-distribution can be generated

# The following scriptlet checks that the resulting source distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi
